{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportnace","label","important","className","content","onClick","style","marginLeft","Notification","message","baseUrl","axios","get","then","response","data","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","messae","map","find","n","changedNote","returnedNote","catch","err","setTimeout","toggleImportnaceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACfC,EAAQF,EAAKG,UAChB,sBAAwB,iBAE3B,OACG,qBAAIC,UAAU,OAAd,UACAJ,EAAKK,QACN,wBAAQC,QAASL,EAAkBM,MAAO,CAAEC,WAAY,IAAxD,SAA+DN,QCGnDO,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OAAIA,EAEF,qBAAKN,UAAU,QAAf,SACEM,IAKG,M,gBCPFC,EAAU,+CA+BD,EA7BA,WACd,OAAOC,IACLC,IAAIF,GACJG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SA0Bd,EAZA,SAAChB,GACf,OAAOY,IACLK,KAAKN,EAASX,GACdc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SASd,EANA,SAACE,EAAIlB,GACnB,OAAOY,IACLO,IADK,UACER,EADF,YACaO,GAAMlB,GACxBc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC6DdI,EAtFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,qBAJxB,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAECjB,MAAK,SAAAkB,GACJT,EAASS,QAEV,IAEH,IA2CMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAClC,GAAD,OAAUA,EAAKG,aAElE,OACE,gCACE,uCACA,cAAC,EAAD,CAAcgC,OAAQP,IACtB,8BACE,yBAAQtB,QAAS,kBAAMqB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYG,KAAI,SAACpC,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAtCD,SAACiB,GAC1B,IAAMlB,EAAOsB,EAAMe,MAAK,SAACC,GAAD,OAAOA,EAAEpB,KAAOA,KAClCqB,EAAW,2BAAQvC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD4B,EACUb,EAAIqB,GACXzB,MAAK,SAAA0B,GACJjB,EAASD,EAAMc,KAAI,SAACpC,GAAD,OAAWA,EAAKkB,KAAOA,EAAKlB,EAAOwC,SAEvDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJ7B,EAAKK,QADD,sCAIfsC,YAAW,WACTd,EAAgB,QACf,KAEHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAEpB,KAAOA,SAoBR0B,CAAmB5C,EAAKkB,MAF3ClB,EAAKkB,SAOhB,uBAAM2B,SAhEM,SAACC,GACfA,EAAMC,iBAEN,IAAMC,EAAa,CACjB3C,QAASmB,EACTR,MAAM,IAAIiC,MAAOC,cACjB/C,UAAWgD,KAAKC,SAAW,IAG7BrB,EACUiB,GACPlC,MAAK,SAAA0B,GACJjB,EAASD,EAAM+B,OAAOb,IACtBf,EAAW,QAmDb,UACE,uBAAO6B,MAAO9B,EAAS+B,SAhDJ,SAACT,GACxBrB,EAAWqB,EAAMU,OAAOF,UAgDpB,wBAAQG,KAAK,SAAb,yB,MChFRC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.084c927b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportnace }) => {\n\tconst label = note.important\n\t\t? 'make note important' : 'make important';\n\n\treturn (\n\t  \t<li className='note'>\n\t\t\t{note.content}\n\t\t\t<button onClick={toggleImportnace} style={{ marginLeft: 10 }}>{label}</button>\n\t\t</li>\n\t)\n}\n\nexport default Note;","const Notification = ({ message }) => {\n\tif (message) {\n\t\treturn (\n\t\t\t<div className='error'>\n\t\t\t\t{message}\n\t\t\t</div>\n\t\t)\n\t}\n\t\n\treturn null;\n}\n\nexport default Notification;","import axios from 'axios';\n// const baseUrl = 'http://localhost:3001/api/notes';\nconst baseUrl = 'https://mynotes-app1.herokuapp.com/api/notes';\n\nconst getAll = () => {\n\treturn axios\n\t\t.get(baseUrl)\n\t\t.then(response => response.data);\n}\n\n// const getAll = () => {\n// \tconst request = axios.get(baseUrl)\n// \tconst nonExisting = {\n// \t  id: 10000,\n// \t  content: 'This note is not saved to server',\n// \t  date: '2019-05-30T17:30:31.098Z',\n// \t  important: true,\n// \t}\n// \treturn request.then(response => response.data.concat(nonExisting))\n//   }\n\nconst create = (note) => {\n\treturn axios\n\t\t.post(baseUrl, note)\n\t\t.then(response => response.data);\n}\n\nconst update = (id, note) => {\n\treturn axios\n\t\t.put(`${baseUrl}/${id}`, note)\n\t\t.then(response => response.data);\n}\n\nexport default {\n\tgetAll,\n\tcreate,\n\tupdate\n}","import React, { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport noteService from \"./services/notes\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(false);\n  const [errorMessage, setErrorMessage] = useState();\n\n  useEffect(() => {\n    noteService\n    .getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n\n    const noteObject = {\n      content: newNote,\n      data: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('');\n      })\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportnaceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n    \n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch(err => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        \n        setNotes(notes.filter(n => n.id !== id))\n      })\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification messae={errorMessage}/>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportnace={() => toggleImportnaceOf(note.id)}\n          />\n        ))}\n      </ul>\n          \n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}